{
    "functions": [
        {
            "name": "ABS",
            "access": "",
            "virtual": false,
            "description": "ABS\nReturns the absolute value of a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The number of which to return the absolute value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nABS(-1)",
                "// returns 42\nABS(42)"
            ],
            "returns": {
                "type": "Number",
                "description": "the absolute value of the `value` parameter"
            }
        },
        {
            "name": "ACOS",
            "access": "",
            "virtual": false,
            "description": "ACOS\nReturns the inverse cosine of a value, in radians.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the inverse cosine. Must be between -1 and 1, inclusive.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 0.6435011087932843\nACOS(0.8)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ACOSH",
            "access": "",
            "virtual": false,
            "description": "ACOSH\nReturns the inverse hyperbolic cosine of a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the inverse hyperbolic cosine. Must be greater than or equal to 1.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2.6339157938496336\nACOSH(7)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "AND",
            "access": "",
            "virtual": false,
            "description": "AND\nReturns true if all of the provided arguments are logically true, and false if any of the provided arguments are logically false.",
            "parameters": [
                {
                    "name": "var_args_expressions",
                    "type": "*",
                    "description": "An expression or reference that represents some logical value, i.e. `true` or `false`, or an expression that can be converted to a logical value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns false\nAND(1, 0, false)",
                "// returns true\nAND(3 + 3 == 6, 10 + 2 == 12)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ARRAY",
            "access": "",
            "virtual": false,
            "description": "ARRAY\nReturns an array from its arguments, combining and flattening multiple arrays into a single array. It always returns an array regardless of the types and formats of the arguments.",
            "parameters": [
                {
                    "name": "var_args_expressions",
                    "type": "*",
                    "description": "Arrays or values to create an array from",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns [1,2,3]\nARRAY(1, 2, 3)",
                "// returns [1,2,3]\nARRAY([1, 2, 3])",
                "// returns [1,2,3,4,5,6,7,8]\nARRAY([1, 2, 3, [4, 5], [6, [7, 8]]])",
                "// returns []\nARRAY()",
                "// returns []\nARRAY([])",
                "// returns [1,2,3,4]\nARRAY(ARRAY(ARRAY([1, 2, ARRAY(3, 4)])))"
            ],
            "returns": {
                "type": "Array",
                "description": ""
            }
        },
        {
            "name": "AVERAGE",
            "access": "",
            "virtual": false,
            "description": "AVERAGE\nReturns the numerical average value in a dataset, ignoring text.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "values to use when calculating the average value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2\nAVERAGE(1, 2, 3)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "CEILING",
            "access": "",
            "virtual": false,
            "description": "CEILING\nRounds a number up to the nearest integer multiple of specified significance.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to round up to the nearest integer multiple of factor.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "factor",
                    "type": "Number",
                    "description": "The number to whose multiples value will be rounded.",
                    "default": 1,
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 139.9\nCEILING(139.85, 0.1)",
                "// returns 140\nCEILING(139.001)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "CHAR",
            "access": "",
            "virtual": false,
            "description": "CHAR\nConvert a number into a character according to the current Unicode table.",
            "parameters": [
                {
                    "name": "number",
                    "type": "Number",
                    "description": "The number of the character to look up from the current Unicode table in decimal format.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"A\"\nCHAR(65)",
                "// returns \"Թ\"\nCHAR(1337)"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "CHOICEVALUE",
            "access": "",
            "virtual": false,
            "description": "CHOICEVALUE\nReturns the selected value for a choice field or classification field",
            "parameters": [
                {
                    "name": "field",
                    "type": "Object",
                    "description": "The choice field or classification field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Red\"\nCHOICEVALUE($choice_field)"
            ],
            "returns": {
                "type": "String",
                "description": "the selected value"
            }
        },
        {
            "name": "CHOICEVALUES",
            "access": "",
            "virtual": false,
            "description": "CHOICEVALUES\nReturns the selected values for a choice field or classification field",
            "parameters": [
                {
                    "name": "field",
                    "type": "Object",
                    "description": "The choice field or classification field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns [\"Red\",\"Green\",\"Blue\"]\nCHOICEVALUES($choice_field)"
            ],
            "returns": {
                "type": "String",
                "description": "the selected value"
            }
        },
        {
            "name": "CLEAN",
            "access": "",
            "virtual": false,
            "description": "CLEAN\nReturns the text with the non-printable ASCII characters removed.",
            "parameters": [
                {
                    "name": "text",
                    "type": "String",
                    "description": "The text whose non-printable characters are to be removed.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Test\"\nCLEAN('Test' + CHAR(31))"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "COALESCE",
            "access": "",
            "virtual": false,
            "description": "COALESCE\nReturns the first parameter whose value exists",
            "parameters": [
                {
                    "name": "parameters",
                    "type": "*",
                    "description": "The value to return if it exists",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Test\"\nCOALESCE(null, null, 'Test', 1)",
                "// returns 1\nCOALESCE(1, null, null)",
                "// returns undefined\nCOALESCE(null, null, null)"
            ],
            "returns": {
                "type": "*",
                "description": "The first parameter that exists"
            }
        },
        {
            "name": "CODE",
            "access": "",
            "virtual": false,
            "description": "CODE\nReturns the numeric Unicode map value of the first character in the string provided.",
            "parameters": [
                {
                    "name": "text",
                    "type": "String",
                    "description": "The string whose first character's Unicode map value will be returned.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 84\nCODE('Test')"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "COMPACT",
            "access": "",
            "virtual": false,
            "description": "COMPACT\nRemoves empty items from an array",
            "parameters": [
                {
                    "name": "value",
                    "type": "Array",
                    "description": "an array of items",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns [1,2,3]\nCOMPACT([null, 1, undefined, null, 2, 3])"
            ],
            "returns": {
                "type": "Array",
                "description": ""
            }
        },
        {
            "name": "CONCATENATE",
            "access": "",
            "virtual": false,
            "description": "CONCATENATE\nReturns the concatenation of multiple values.\n\n**NOTE:** This can only be used on fields that store the values as a string. Fields like choice fields and classification sets store the values in an array. Please refer [this example](/expressions/examples/combine-arrays/) for combining arrays.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "String",
                    "description": "Strings to append in sequence.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"This is a sentence.\"\nCONCATENATE(\"This \", \"is \", \"a \", \"sentence.\")",
                "// returns \"42311\"\nCONCATENATE(42, 31, 1)",
                "// returns \"Age is 42\"\nCONCATENATE(\"Age \", \"is \", 42)"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "CONCAT",
            "access": "",
            "virtual": false,
            "description": "CONCAT\nReturns the concatenation of multiple values. Alias for CONCATENATE()\n\n**NOTE:** This can only be used on fields that store the values as a string. Fields like choice fields and classification sets store the values in an array.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "String",
                    "description": "Strings to append in sequence.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"This is a sentence.\"\nCONCAT(\"This \", \"is \", \"a \", \"sentence.\")",
                "// returns \"42311\"\nCONCAT(42, 31, 1)",
                "// returns \"Age is 42\"\nCONCAT(\"Age \", \"is \", 42)"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "CONTAINS",
            "access": "",
            "virtual": false,
            "description": "CONTAINS\nDetermines whether an array or string contains a given value",
            "parameters": [
                {
                    "name": "haystack",
                    "type": [
                        "Array",
                        "String"
                    ],
                    "description": "The array of values or string to check",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "needle",
                    "type": "String",
                    "description": "The value to look for",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "fromIndex",
                    "type": "Number",
                    "description": "The starting index to use",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nCONTAINS(\"abcd\", \"a\")",
                "// returns true\nCONTAINS(['a', 'b', 'c', 'd'], 'b')",
                "// returns false\nCONTAINS(\"abcd\", \"e\")"
            ],
            "returns": {
                "type": "Boolean",
                "description": "true if the value is found"
            }
        },
        {
            "name": "COS",
            "access": "",
            "virtual": false,
            "description": "COS\nReturns the cosine of a value, in radians.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the cosine.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 0.15425144988758405\nCOS(30)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "COSH",
            "access": "",
            "virtual": false,
            "description": "COSH\nReturns the hyperbolic cosine of a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The real number for which to calculate the hyperbolic cosine.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1.5430806348152437\nCOSH(1)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "COUNT",
            "access": "",
            "virtual": false,
            "description": "COUNT\nReturns a count of the number of *numeric* values in a dataset.",
            "parameters": [
                {
                    "name": "values",
                    "type": "Array",
                    "description": "an array of numbers",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 5\nCOUNT([11, 22, 33, 44, 55])",
                "// returns 0\n// since it only counts numeric arguments\nCOUNT(['a', 'b', 'c', 'd', 'e'])"
            ],
            "returns": {
                "type": "Number",
                "description": "the count of numeric values in the array"
            }
        },
        {
            "name": "COUNTA",
            "access": "",
            "virtual": false,
            "description": "COUNTA\nReturns a count of values in a dataset.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Array",
                    "description": "an array of values",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 5\nCOUNTA([11, 22, 33, 44, 55])",
                "// returns 5\n// since it counts all arguments\nCOUNTA(['a', 'b', 'c', 'd', 'e'])"
            ],
            "returns": {
                "type": "Number",
                "description": "the count of items in the array"
            }
        },
        {
            "name": "COUNTBLANK",
            "access": "",
            "virtual": false,
            "description": "COUNTBLANK\nReturns the number of blank values in a dataset.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Array",
                    "description": "an array of items",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 3\n// since null and '' are blank values\nCOUNTBLANK([null, null, '', 1])"
            ],
            "returns": {
                "type": "Number",
                "description": "the number of blank items in the array"
            }
        },
        {
            "name": "COUNTRY",
            "access": "",
            "virtual": false,
            "description": "COUNTRY\nReturns the current country according to the device locale settings",
            "parameters": [],
            "examples": [
                "// returns \"US\"\nCOUNTRY()"
            ],
            "returns": {
                "type": "String",
                "description": "The country code of the current locale"
            }
        },
        {
            "name": "CURRENCYCODE",
            "access": "",
            "virtual": false,
            "description": "CURRENCYCODE\nReturns the currency code for the current device locale",
            "parameters": [],
            "examples": [
                "// returns \"USD\"\nCURRENCYCODE()"
            ],
            "returns": {
                "type": "String",
                "description": "the ISO 4217 currency code according to the current device settings"
            }
        },
        {
            "name": "CURRENCYSYMBOL",
            "access": "",
            "virtual": false,
            "description": "CURRENCYSYMBOL\nReturns the currency symbol for the current device locale",
            "parameters": [],
            "examples": [
                "// returns \"$\"\nCURRENCYSYMBOL()"
            ],
            "returns": {
                "type": "String",
                "description": "the currency symbol"
            }
        },
        {
            "name": "DATANAMES",
            "access": "",
            "virtual": false,
            "description": "DATANAMES\nReturns the data names of the form fields",
            "parameters": [
                {
                    "name": "type",
                    "type": "String",
                    "description": "Optional field type",
                    "default": "any",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns [\"name\",\"items\",\"cost\"]\nDATANAMES()",
                "// returns [\"items\"]\nDATANAMES('Repeatable')"
            ],
            "returns": {
                "type": "Array",
                "description": ""
            }
        },
        {
            "name": "DATE",
            "access": "",
            "virtual": false,
            "description": "DATE\nConverts a provided year, month, and day into a date.",
            "parameters": [
                {
                    "name": "year",
                    "type": "Number",
                    "description": "year",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "month",
                    "type": "Number",
                    "description": "month",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "day",
                    "type": "Number",
                    "description": "day",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2015-12-16\nDATE(2015, 12, 16)"
            ],
            "returns": {
                "type": "Date",
                "description": ""
            }
        },
        {
            "name": "DATEADD",
            "access": "",
            "virtual": false,
            "description": "DATEADD\nAdds a number of days to a given date",
            "parameters": [
                {
                    "name": "date",
                    "type": "Date",
                    "description": "date",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "days",
                    "type": "Number",
                    "description": "the number of days to add",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2015-01-11\nDATEADD('2015-01-01', 10)",
                "// returns 2015-05-01\nDATEADD('2015-01-31', 90)"
            ],
            "returns": {
                "type": "Date",
                "description": ""
            }
        },
        {
            "name": "DATEVALUE",
            "access": "",
            "virtual": false,
            "description": "DATEVALUE\nConverts a provided date string in a known format to a date value.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "a string containing a date",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2015-01-01\nDATEVALUE('2015-01-01')"
            ],
            "returns": {
                "type": "Date",
                "description": ""
            }
        },
        {
            "name": "DAY",
            "access": "",
            "virtual": false,
            "description": "DAY\nReturns the day of the month that a specific date falls on, in numeric format.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Date",
                    "description": "a date to extract the day from",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 31\nDAY('2015-12-31')"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "DECIMALSEPARATOR",
            "access": "",
            "virtual": false,
            "description": "DECIMALSEPARATOR\nReturns the current decimal separator given the current device locale",
            "parameters": [],
            "examples": [
                "// returns \".\"\nDECIMALSEPARATOR()"
            ],
            "returns": {
                "type": "String",
                "description": "the current decimal separator"
            }
        },
        {
            "name": "DEGREES",
            "access": "",
            "virtual": false,
            "description": "DEGREES\nConverts an angle value in radians to degrees.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Number in radians.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 57.29577951308232\nDEGREES(1)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "DESCRIPTION",
            "access": "",
            "virtual": false,
            "description": "DESCRIPTION\nReturns the description of a given field",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "the Data Name of the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Enter the name\"\nDESCRIPTION('name')"
            ],
            "returns": {
                "type": "*",
                "description": "the field description"
            }
        },
        {
            "name": "DOLLAR",
            "access": "",
            "virtual": false,
            "description": "DOLLAR\nFormats a number into a locale-specific currency format. This function is useful when including a currency amount in a longer piece of text. To display just a currency in a calculated field, it's recommended to set the display type of the calculated field to 'Currency' and just return a number in the expression. When the display type of the calculated field is set to currency, the number is automatically displayed as a formatted currency.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "a dollar amount",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "decimals",
                    "type": "Number",
                    "description": "the number of decimal places (default is 2)",
                    "default": 2,
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "currency",
                    "type": "String",
                    "description": "the currency code to display (e.g. USD, EUR, or AUD)",
                    "default": "locale default",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "language",
                    "type": "String",
                    "description": "the language locale used to format the currency. (e.g. en-US, pt-BR, or en-GB)",
                    "default": "locale default",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"$1,234.57\"\nDOLLAR(1234.567)",
                "// returns \"1 234,57 $US\"\n// USD formatted in French\nDOLLAR(1234.567, 2, 'USD', 'fr-FR')",
                "// returns \"€1.234,57\"\n// Euro formatted in Portuguese\nDOLLAR(1234.567, 2, 'EUR', 'pt-BR')"
            ],
            "returns": {
                "type": "String",
                "description": "formatted currency"
            }
        },
        {
            "name": "EMAIL",
            "access": "",
            "virtual": false,
            "description": "EMAIL\nReturns the email address of the current user",
            "parameters": [],
            "examples": [
                "// returns \"test@example.com\"\nEMAIL()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "EVEN",
            "access": "",
            "virtual": false,
            "description": "EVEN\nReturns number rounded up to the nearest even integer.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Number to round.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 6\nEVEN(5.2)",
                "// returns 530\nEVEN(528.2172814)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "EXACT",
            "access": "",
            "virtual": false,
            "description": "EXACT\nTests whether two strings are identical.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "First string to compare.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value",
                    "type": "String",
                    "description": "Second string to compare.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nEXACT(\"String 1\", \"String 1\")",
                "// returns false\nEXACT(\"String 1\", \"Another String\")",
                "// returns true\nEXACT(4,4)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "EXISTS",
            "access": "",
            "virtual": false,
            "description": "EXISTS\nTests whether a value exists",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Object",
                    "description": "The value(s) to check for existence",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nEXISTS(1)",
                "// returns false\nEXISTS(null)",
                "// returns false\nEXISTS([])"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "EXP",
            "access": "",
            "virtual": false,
            "description": "EXP\nReturns Euler's number, e (~2.718) raised to a power.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Power to which to raise `e`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 20.085536923187668\nEXP(3)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "FACT",
            "access": "",
            "virtual": false,
            "description": "FACT\nReturns the factorial of a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the factorial.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 120\nFACT(5)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "FACTDOUBLE",
            "access": "",
            "virtual": false,
            "description": "FACTDOUBLE\nReturns the double factorial of a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the double factorial.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 15\nFACTDOUBLE(5)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "FALSE",
            "access": "",
            "virtual": false,
            "description": "FALSE\nReturns the boolean value `false`.",
            "parameters": [],
            "examples": [
                "// returns false\nFALSE()"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "FIELDTYPE",
            "access": "",
            "virtual": false,
            "description": "FIELDTYPE\nReturns the field type of a field by its data name",
            "parameters": [
                {
                    "name": "dataName",
                    "type": "String",
                    "description": "The data name of the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Repeatable\"\nFIELDTYPE('items')",
                "// returns \"TextField\"\nFIELDTYPE('name')"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "FIND",
            "access": "",
            "virtual": false,
            "description": "FIND\nReturns the position at which a string is first found within text, case-sensitive.",
            "parameters": [
                {
                    "name": "search_for",
                    "type": "String",
                    "description": "String to search for within `text_to_search`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "text_to_search",
                    "type": "String",
                    "description": "Text to search for the first instance of `search_for`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "starting_at",
                    "type": "Number",
                    "description": "argument Position index to begin the search.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 5\nFIND(\"needle\", \"the needle is in the haystack\")"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "FIRST",
            "access": "",
            "virtual": false,
            "description": "FIRST\nReturns the first N items from an array or string",
            "parameters": [
                {
                    "name": "array",
                    "type": "Array",
                    "description": "an array object",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "count",
                    "type": "Number",
                    "description": "The number of items to return",
                    "default": 1,
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nFIRST([1, 2, 3])",
                "// returns [\"a\",\"b\"]\nFIRST(['a', 'b', 'c'], 2)",
                "// returns \"a\"\nFIRST('abc')",
                "// returns [\"a\",\"b\"]\nFIRST('abc', 2)"
            ],
            "returns": {
                "type": "Object",
                "description": ""
            }
        },
        {
            "name": "FIXED",
            "access": "",
            "virtual": false,
            "description": "FIXED\nFormats a number with a fixed number of decimal places.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Number to format.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "number_of_places",
                    "type": "Number",
                    "description": "Number of decimal places to display in the result.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value",
                    "type": "Boolean",
                    "description": "Whether or not to suppress the thousands separator.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"3000.14\"\nFIXED(3000.141592, 2, true)",
                "// returns \"6,276.222\"\nFIXED(6276.22241, 3, false)"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "FLATTEN",
            "access": "",
            "virtual": false,
            "description": "FLATTEN\nFlatten nested arrays into a flat array",
            "parameters": [
                {
                    "name": "value",
                    "type": "Array",
                    "description": "Array to flatten",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns [1,2,3]\nFLATTEN([[1, 2, 3]])",
                "// returns [1,2,3,4,5,6]\nFLATTEN([[1, 2, 3], [4, 5, 6]])"
            ],
            "returns": {
                "type": "Array",
                "description": ""
            }
        },
        {
            "name": "FLOOR",
            "access": "",
            "virtual": false,
            "description": "FLOOR\nRounds a number down to the nearest integer multiple of specified significance.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Number to round down.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "significance",
                    "type": "Number",
                    "description": "The number to whose multiples `value` will be rounded.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 126\nFLOOR(126.25, 1)",
                "// returns 120\nFLOOR(126.25, 10)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "FORMAT",
            "access": "",
            "virtual": false,
            "description": "FORMAT\nFormats a string",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "string format. Use %s for strings and %d for numbers.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "var_args_values",
                    "type": "*",
                    "description": "Value(s) to substitute into the format string",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"The pole height is 20 meters and has 3 issues detected.\"\nFORMAT('The pole height is %d meters and has %d issues detected.', 20, 3)",
                "// returns \"11/11/2015 12:30:30\"\nFORMAT('%s/%s/%s %s:%s:%s', 11, 11, 2015, 12, 30, 30)"
            ],
            "returns": {
                "type": "String",
                "description": "formatted string"
            }
        },
        {
            "name": "FORMATNUMBER",
            "access": "",
            "virtual": false,
            "description": "FORMATNUMBER\nFormats a number in a given locale. This function is useful when including a number in a longer piece of text. To display just a number in a calculated field, it's recommended to set the display type of the calculated field to 'Number' and just return a number in the expression. When the display type of the calculated field is set to 'Number', the number is automatically displayed as a formatted number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "language",
                    "type": "String",
                    "description": "the BCP 47 language identifier to use when formatting the number. e.g. `en-US`, `fr-FR`, `en-AU` or `pt-BR`",
                    "default": "locale default",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"1,234.568\"\nFORMATNUMBER(1234.56789999)",
                "// returns \"1 234,568\"\nFORMATNUMBER(1234.56789999, 'fr-FR')",
                "// returns \"1.234,568\"\nFORMATNUMBER(1234.56789999, 'pt-BR')"
            ],
            "returns": {
                "type": "String",
                "description": "formatted number as text"
            }
        },
        {
            "name": "GCD",
            "access": "",
            "virtual": false,
            "description": "GCD\nReturns the greatest common divisor of one or more integers.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Value(s) to consider to calculate the greatest common divisor.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nGCD(5, 9)",
                "// returns 7\nGCD(14, 21, 42)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "GETRESULT",
            "access": "",
            "virtual": false,
            "description": "GETRESULT\nReturns the current result value for the current expression",
            "parameters": [],
            "examples": [
                "// returns 1\nSETRESULT(1)\nGETRESULT()"
            ],
            "returns": {
                "type": "*",
                "description": "the current result value"
            }
        },
        {
            "name": "GROUP",
            "access": "",
            "virtual": false,
            "description": "GROUP\nReturns the sorted values within an array",
            "parameters": [
                {
                    "name": "values",
                    "type": "Array",
                    "description": "The values to sort",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "callback",
                    "type": "function",
                    "description": "A transform function to use when sorting objects",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns {\"red\":[\"red\"],\"green\":[\"green\",\"green\"],\"blue\":[\"blue\"]}\nGROUP(['red', 'green', 'green', 'blue'])",
                "// returns {\"1\":[1,1,1],\"2\":[2],\"3\":[3]}\nGROUP([1, 1, 1, 2, 3])"
            ],
            "returns": {
                "type": "Array",
                "description": ""
            }
        },
        {
            "name": "GROUPINGSEPARATOR",
            "access": "",
            "virtual": false,
            "description": "GROUPINGSEPARATOR\nReturns the currency thousands separator for the current device locale",
            "parameters": [],
            "examples": [
                "// returns \",\"\nGROUPINGSEPARATOR()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "GROUPINGSIZE",
            "access": "",
            "virtual": false,
            "description": "GROUPINGSIZE\nReturns the number of digits between the grouping separators for numbers in the current device locale. e.g. 3 if the current locale uses a thousands separator",
            "parameters": [],
            "examples": [
                "// returns 3\nGROUPINGSIZE()"
            ],
            "returns": {
                "type": "Number",
                "description": "The number of digits used for the grouping separator."
            }
        },
        {
            "name": "HASOTHER",
            "access": "",
            "virtual": false,
            "description": "HASOTHER\nTests whether a choice field or classification field has an 'Other' value entered",
            "parameters": [
                {
                    "name": "field",
                    "type": "Object",
                    "description": "the choice field or classification to test",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns false\nHASOTHER($choice_field)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "IF",
            "access": "",
            "virtual": false,
            "description": "IF\nReturns one value if a logical expression is true and another if it is false.",
            "parameters": [
                {
                    "name": "value",
                    "type": "*",
                    "description": "logical expression",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value_if_true",
                    "type": "*",
                    "description": "The value to return if the expression is true",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value_if_false",
                    "type": "*",
                    "description": "The value to return if the expression is false",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"1 is less than 3\"\nIF(1 > 3, '1 is greater than 3', '1 is less than 3')",
                "// returns \"Red is selected\"\nIF(ISSELECTED($choice_field, 'Red'), 'Red is selected', 'Red is not selected')"
            ],
            "returns": {
                "type": "*",
                "description": ""
            }
        },
        {
            "name": "IFERROR",
            "access": "",
            "virtual": false,
            "description": "IFERROR\nReturns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent.",
            "parameters": [
                {
                    "name": "value",
                    "type": "*",
                    "description": "value",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value_if_error",
                    "type": "*",
                    "description": "the value to return if the first value is an error",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nIFERROR(new Error('This is an error'), 1)"
            ],
            "returns": {
                "type": "*",
                "description": ""
            }
        },
        {
            "name": "INSPECT",
            "access": "",
            "virtual": false,
            "description": "INSPECT\nReturns the string representation of a value. This function is useful for troubleshooting expressions.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to inspect",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"[ 1, 2, 3 ]\"\nINSPECT([1, 2, 3])"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "INT",
            "access": "",
            "virtual": false,
            "description": "INT\nRounds a number down to the nearest integer that is less than or equal to it.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Value to round down to the nearest integer.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 34\nINT(34.24)",
                "// returns -11\nINT(-10.49)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ISBLANK",
            "access": "",
            "virtual": false,
            "description": "ISBLANK\nChecks whether the field's value is empty.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "Field value to check.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISBLANK(\"\")",
                "// returns false\nISBLANK(\"Test\")"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISERR",
            "access": "",
            "virtual": false,
            "description": "ISERR\nChecks whether the value is an error",
            "parameters": [
                {
                    "name": "value",
                    "type": "*",
                    "description": "a value",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISERR(new Error)",
                "// returns false\nISERR(1)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISERROR",
            "access": "",
            "virtual": false,
            "description": "ISERROR\nChecks whether the value is an error",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "a value",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISERROR(new Error)",
                "// returns false\nISERROR(1)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISEVEN",
            "access": "",
            "virtual": false,
            "description": "ISEVEN\nChecks whether the provided value is an even number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to be verified as even.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISEVEN(4)",
                "// returns false\nISEVEN(5)",
                "// returns true\nISEVEN(4.12)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISLOGICAL",
            "access": "",
            "virtual": false,
            "description": "ISLOGICAL\nChecks whether a value is `true` or `false`.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The value to be verified as `true` or `false`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISLOGICAL(true)",
                "// returns false\nISLOGICAL(\"Text\")"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISNAN",
            "access": "",
            "virtual": false,
            "description": "ISNAN\nTest whether a value is not a number",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "a value",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISNAN(NaN)",
                "// returns true\nISNAN('aaa' / 7)",
                "// returns false\nISNAN(7)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISNONTEXT",
            "access": "",
            "virtual": false,
            "description": "ISNONTEXT\nTests whether a value is non-textual.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The value to test as non-text.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISNONTEXT(4)",
                "// returns false\nISNONTEXT(\"Some text\")"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISNUMBER",
            "access": "",
            "virtual": false,
            "description": "ISNUMBER\nTests whether a value is a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to be verified as a number.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISNUMBER(10)",
                "// returns false\nISNUMBER(\"Some text\")"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISODD",
            "access": "",
            "virtual": false,
            "description": "ISODD\nChecks whether the provided value is an odd number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to be verified as odd.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns false\nISODD(4)",
                "// returns true\nISODD(5)",
                "// returns true\nISODD(3.12)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISROLE",
            "access": "",
            "virtual": false,
            "description": "ISROLE\nChecks whether the current user's role is one of the arguments",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "String",
                    "description": "The role values to check",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISROLE('Owner', 'Manager') // is the current role either Owner or Manager?"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISSELECTED",
            "access": "",
            "virtual": false,
            "description": "ISSELECTED\nChecks whether a given choice is selected for a choice field or classification field",
            "parameters": [
                {
                    "name": "value",
                    "type": "*",
                    "description": "The choice field, classification field to check for a value being selected",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "choice",
                    "type": "String",
                    "description": "The choice value to check for",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\n// $choice_field has Red, Green, and Blue selected\nISSELECTED($choice_field, 'Red')",
                "// returns false\n// $choice_field has Red, Green, and Blue selected\nISSELECTED($choice_field, 'Orange')"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISTEXT",
            "access": "",
            "virtual": false,
            "description": "ISTEXT\nChecks whether a value is text.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The value to test as text.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISTEXT(\"Text\")",
                "// returns false\nISTEXT(4)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "LABEL",
            "access": "",
            "virtual": false,
            "description": "LABEL\nReturns the label of a given field",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "the Data Name of the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Name\"\nLABEL('name')"
            ],
            "returns": {
                "type": "*",
                "description": "the label of the field"
            }
        },
        {
            "name": "LANGUAGE",
            "access": "",
            "virtual": false,
            "description": "LANGUAGE\nReturns the language code for the current device locale",
            "parameters": [],
            "examples": [
                "// returns \"en-US\"\nLANGUAGE()"
            ],
            "returns": {
                "type": "String",
                "description": "the BCP 47 language code"
            }
        },
        {
            "name": "LAST",
            "access": "",
            "virtual": false,
            "description": "LAST\nReturns the last N items from an array or string",
            "parameters": [
                {
                    "name": "array",
                    "type": "Array",
                    "description": "an array object",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "count",
                    "type": "Number",
                    "description": "The number of items to return",
                    "default": 1,
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 3\nLAST([1, 2, 3])",
                "// returns [\"b\",\"c\"]\nLAST(['a', 'b', 'c'], 2)",
                "// returns \"c\"\nLAST('abc')",
                "// returns [\"b\",\"c\"]\nLAST('abc', 2)"
            ],
            "returns": {
                "type": "Object",
                "description": ""
            }
        },
        {
            "name": "LATITUDE",
            "access": "",
            "virtual": false,
            "description": "LATITUDE\nReturns the latitude of the current feature (record or repeatable item).",
            "parameters": [],
            "examples": [
                "// returns 27.770756908186286\nLATITUDE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LCM",
            "access": "",
            "virtual": false,
            "description": "LCM\nReturns the least common multiple of one or more integers.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Value(s) to consider to calculate the least common multiple.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 10\nLCM(2, 5)",
                "// returns 660\nLCM(5, 22, 12)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LEFT",
            "access": "",
            "virtual": false,
            "description": "LEFT\nReturns a substring from the beginning of a given string.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string value from which the left portion will be returned.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "number_of_characters",
                    "type": "Number",
                    "description": "The number of characters to return from the left side of the string.",
                    "default": 1,
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Ful\"\nLEFT(\"Fulcrum\", 3)",
                "// returns \"F\"\nLEFT(\"Fulcrum\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "LEN",
            "access": "",
            "virtual": false,
            "description": "LEN\nReturns the length of a string value.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string from which to return the length.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 30\nLEN(\"Fulcrum is for data collection\")"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LN",
            "access": "",
            "virtual": false,
            "description": "LN\nReturns the the logarithm of a number, base `e` (Euler's number).",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the logarithm, base `e`. Must be a positive number.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1.6094379124341003\nLN(5)",
                "// returns NaN\nLN(\"Test\")"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LOCALE",
            "access": "",
            "virtual": false,
            "description": "LOCALE\nReturns the current locale code",
            "parameters": [],
            "examples": [
                "// returns \"en_US\"\nLOCALE()"
            ],
            "returns": {
                "type": "String",
                "description": "the current locale"
            }
        },
        {
            "name": "LOG",
            "access": "",
            "virtual": false,
            "description": "LOG\nReturns the the logarithm of a number given a base.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the logarithm given `base`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "base",
                    "type": "Number",
                    "description": "The base to use for the logarithm calculation.",
                    "default": 10,
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2.8613531161467867\nLOG(100, 5)",
                "// returns 2\nLOG(100)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LOG10",
            "access": "",
            "virtual": false,
            "description": "LOG10\nReturns the the logarithm of a number, base 10.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the logarithm, base 10.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2\nLOG10(100)",
                "// returns 1.6989700043360185\nLOG10(50)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LONGITUDE",
            "access": "",
            "virtual": false,
            "description": "LONGITUDE\nReturns the longitude of the current feature (record or repeatable item)",
            "parameters": [],
            "examples": [
                "// returns -82.63814896345139\nLONGITUDE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LOWER",
            "access": "",
            "virtual": false,
            "description": "LOWER\nConverts a specified string to lowercase.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string to convert to lowercase.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"empire state building\"\nLOWER(\"Empire State Building\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "LPAD",
            "access": "",
            "virtual": false,
            "description": "LPAD\nPads a string on the left side",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string to pad",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "count",
                    "type": "Number",
                    "description": "The number of characters to pad",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "character",
                    "type": "String",
                    "description": "The character to use for padding",
                    "default": "' '",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"0002\"\nLPAD('2', 4, '0')",
                "// returns \"000002\"\nLPAD('2', 6, '0')"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "MAX",
            "access": "",
            "virtual": false,
            "description": "MAX\nReturns the maximum value in a given set of values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values in which to find the maximum value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 322\nMAX(3, 1, 322, 76)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MAXA",
            "access": "",
            "virtual": false,
            "description": "MAXA\nReturns the maximum numeric value in a given set of values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values in which to find the maximum numeric value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 10\nMAXA([3, 4, -6, '10'])"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MEDIAN",
            "access": "",
            "virtual": false,
            "description": "MEDIAN\nReturns the median value in a set of numeric values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values in which to find the median value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 15\nMEDIAN(15,2,9,67,22)",
                "// returns 4\nMEDIAN(1,10,4)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MID",
            "access": "",
            "virtual": false,
            "description": "MID\nReturns a segment of a string value.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string to extract a segment from.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "start_position",
                    "type": "Number",
                    "description": "Index from the left of the string from which to begin extracting. First character is index `1`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "number_of_characters",
                    "type": "Number",
                    "description": "Number of characters to extract.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"iOS\"\nMID(\"Fulcrum for iOS\", 13, 3)"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "MIN",
            "access": "",
            "virtual": false,
            "description": "MIN\nReturns the minimum value in a given set of values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values in which to find the minimum value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nMIN(3, 1, 322, 76)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MINA",
            "access": "",
            "virtual": false,
            "description": "MINA\nReturns the minimum numeric value in a given set of values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values in which to find the minumum numeric value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns -6\nMINA([3, 4, -6, '10'])"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MOD",
            "access": "",
            "virtual": false,
            "description": "MOD\nReturns the result of the modulo operator, the remainder after a division operation.",
            "parameters": [
                {
                    "name": "dividend",
                    "type": "Number",
                    "description": "The number to be divided to find the remainder.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "divisor",
                    "type": "Number",
                    "description": "The number to divide by.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nMOD(10, 3)",
                "// returns 0\nMOD(10, 10)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MONTH",
            "access": "",
            "virtual": false,
            "description": "MONTH\nReturns the month of a given date.",
            "parameters": [
                {
                    "name": "date",
                    "type": "Date",
                    "description": "a date",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 12\nMONTH(\"2015/12/16\")"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "N",
            "access": "",
            "virtual": false,
            "description": "N\nReturns the value provided as a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to be converted to a number.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 10\nN(10)",
                "// returns 1\nN(true)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "NOT",
            "access": "",
            "virtual": false,
            "description": "NOT\nReturns the opposite of a logical value - `NOT(true)` returns `false`; `NOT(false)` returns `true`.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Boolean",
                    "description": "The expression or value representing a logical value (`true` or `false`).",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nNOT(false)",
                "// returns false\nNOT(5)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "NUM",
            "access": "",
            "virtual": false,
            "description": "NUM\nConverts any value to a number",
            "parameters": [
                {
                    "name": "value",
                    "type": "*",
                    "description": "a value to convert to a number",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 12\nNUM('12')",
                "// returns 12\nNUM(12)",
                "// returns NaN\nNUM('a')"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "NUMS",
            "access": "",
            "virtual": false,
            "description": "NUMS\nConverts multiple parameters to an array of numbers",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "*",
                    "description": "the values to convert to numbers",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns [1,2,3]\nNUMS('1' ,'2', '3')",
                "// returns [1,2,null]\nNUMS('1' ,'2', 'a')"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ODD",
            "access": "",
            "virtual": false,
            "description": "ODD\nRounds a number up to the nearest odd integer.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The number to round to the nearest odd integer.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 5\nODD(4.22)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ONCE",
            "access": "",
            "virtual": false,
            "description": "ONCE\nReturns a value once, given the current value. This is useful to perform a calculation only once, the first time it's evaluated.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Apple iPhone6,2, iOS 8.1, Fulcrum 2.7.0 2162\"\nONCE(VERSIONINFO())"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "OR",
            "access": "",
            "virtual": false,
            "description": "OR\nReturns `true` if any of the provided arguments are logically true, and `false` if all of the provided arguments are logically false.",
            "parameters": [
                {
                    "name": "var_args_expressions",
                    "type": "*",
                    "description": "An expression or reference that represents some logical value, i.e. `true` or `false`, or an expression that can be converted to a logical value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nOR(true, true, false)",
                "// returns false\nOR(ISEVEN(5),ISODD(6))"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "OTHER",
            "access": "",
            "virtual": false,
            "description": "OTHER\nReturns the current 'Other' value for a choice field or classification field",
            "parameters": [
                {
                    "name": "field",
                    "type": "Object",
                    "description": "The choice field or classification field variable",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns undefined\nOTHER($choice_field)"
            ],
            "returns": {
                "type": "String",
                "description": "the current 'Other' value"
            }
        },
        {
            "name": "PI",
            "access": "",
            "virtual": false,
            "description": "PI\nReturns the value of Pi to 15 decimal places.",
            "parameters": [],
            "examples": [
                "// returns 3.141592653589793\nPI()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "PLATFORM",
            "access": "",
            "virtual": false,
            "description": "PLATFORM\nReturns the current platform. Currently one of: `iOS`, `Android`, or `Web`.",
            "parameters": [],
            "examples": [
                "// returns \"iOS\"\nPLATFORM()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "PLUCK",
            "access": "",
            "virtual": false,
            "description": "PLUCK\nExtract property values from an object",
            "parameters": [
                {
                    "name": "array",
                    "type": "Array",
                    "description": "An array of objects to extract properties from",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "property",
                    "type": "String",
                    "description": "The property name to extract",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns [1,2,3]\nvar objects = [{name: 'one',   value: 1},\n               {name: 'two',   value: 2},\n               {name: 'three', value: 3}];\nPLUCK(objects, 'value')"
            ],
            "returns": {
                "type": "Object",
                "description": ""
            }
        },
        {
            "name": "POWER",
            "access": "",
            "virtual": false,
            "description": "POWER\nReturns a number raised to a power.",
            "parameters": [
                {
                    "name": "base",
                    "type": "Number",
                    "description": "The number to be raised to the `exponent` power.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "exponent",
                    "type": "Number",
                    "description": "The exponent to raise `base` to.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 390625\nPOWER(5, 8)",
                "// returns 3.1622776601683795\nPOWER(10, 0.5)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "PRECISION",
            "access": "",
            "virtual": false,
            "description": "PRECISION\nReturns the precision of a number",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "a number",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 3\nPRECISION(1.333)",
                "// returns 1\nPRECISION(1.3)",
                "// returns 0\nPRECISION(1)"
            ],
            "returns": {
                "type": "Number",
                "description": "the number of decimal places"
            }
        },
        {
            "name": "PRODUCT",
            "access": "",
            "virtual": false,
            "description": "PRODUCT\nReturns the result of multiplying a series of numbers together.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values to multiply together.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 216\nPRODUCT(4, 18, 3)",
                "// returns 0\nPRODUCT(23, 5, 0)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "PROJECTID",
            "access": "",
            "virtual": false,
            "description": "PROJECTID\nReturns the project ID of the record",
            "parameters": [],
            "examples": [
                "// returns \"88eb3511-13d8-4666-b188-8108019d0984\"\nPROJECTID()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "PROJECTNAME",
            "access": "",
            "virtual": false,
            "description": "PROJECTNAME\nReturns the project name of the record",
            "parameters": [],
            "examples": [
                "// returns \"Project X\"\nPROJECTNAME()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "PROPER",
            "access": "",
            "virtual": false,
            "description": "PROPER\nCapitalizes each word in a string (title case).",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "String to capitalize words within.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Fulcrum Mobile Data Collection\"\nPROPER(\"fulcrum mobile data collection\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "QUOTIENT",
            "access": "",
            "virtual": false,
            "description": "QUOTIENT\nReturns the result of dividing one number by another.",
            "parameters": [
                {
                    "name": "dividend",
                    "type": "Number",
                    "description": "The number to divide.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "divisor",
                    "type": "Number",
                    "description": "The number to be divided by.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 6\nQUOTIENT(30, 5)",
                "// returns 0\nQUOTIENT(0, 10)",
                "// returns NaN\nQUOTIENT(45, 0)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "RADIANS",
            "access": "",
            "virtual": false,
            "description": "RADIANS\nConverts a number of degrees to radians.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The number of degrees to be converted.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 0.5235987755982988\nRADIANS(30)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "RAND",
            "access": "",
            "virtual": false,
            "description": "RAND\nReturns a random number between 0 and 1.",
            "parameters": [],
            "examples": [
                "// returns true\nRAND() > 0"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "RANDBETWEEN",
            "access": "",
            "virtual": false,
            "description": "RANDBETWEEN\nReturns a random integer between two values.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Low value of the range.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value",
                    "type": "Number",
                    "description": "High value of the range.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\n4 < RANDBETWEEN(4, 9) < 9"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "RECORDID",
            "access": "",
            "virtual": false,
            "description": "RECORDID\nReturns the ID of the current record. This function will always return the top level record ID even when used inside a repeatable. To get the repeatable item ID, use the `REPEATABLEID` function.",
            "parameters": [],
            "examples": [
                "// returns \"96eb35f5-13d8-4666-b188-8108019d0984\"\nRECORDID()"
            ],
            "returns": {
                "type": "String",
                "description": "The ID of the current record"
            }
        },
        {
            "name": "REPEATABLEID",
            "access": "",
            "virtual": false,
            "description": "REPEATABLEID\nReturns the ID of the current repeatable item.",
            "parameters": [],
            "examples": [
                "// returns \"859fdb06-4e7d-4bed-b1d2-af168db71522\"\nREPEATABLEID()"
            ],
            "returns": {
                "type": "String",
                "description": "The ID of the current repeatable item"
            }
        },
        {
            "name": "REPEATABLENUMBER",
            "access": "",
            "virtual": false,
            "description": "REPEATABLENUMBER\nReturns the sequential number of a repeatable item.",
            "parameters": [],
            "examples": [
                "// returns 4\nREPEATABLENUMBER()"
            ],
            "returns": {
                "type": "Number",
                "description": "The ordinal of this repeatable item within the repeatable"
            }
        },
        {
            "name": "REPEATABLEVALUES",
            "access": "",
            "virtual": false,
            "description": "REPEATABLEVALUES\nReturn a specific field from multiple repeatable items",
            "parameters": [
                {
                    "name": "repeatableVariable",
                    "type": "Object",
                    "description": "The repeatable field variable",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "dataName",
                    "type": "String",
                    "description": "The data name of the field to extract from each repeatable item",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns [1,2,3]\nREPEATABLEVALUES($repeatable_field, 'cost')"
            ],
            "returns": {
                "type": "Array",
                "description": "An array of values of the `dataName` field from each item"
            }
        },
        {
            "name": "REPEATABLESUM",
            "access": "",
            "virtual": false,
            "description": "REPEATABLESUM\nReturn the sum of a specific numeric field across multiple repeatable items",
            "parameters": [
                {
                    "name": "repeatableVariable",
                    "type": "Object",
                    "description": "The repeatable field variable",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "dataName",
                    "type": "String",
                    "description": "The data name of the field to extract from each repeatable item",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 6\nREPEATABLESUM($repeatable_field, 'cost')"
            ],
            "returns": {
                "type": "Number",
                "description": "The sum of the `dataName` field within each repeatable item"
            }
        },
        {
            "name": "REPLACE",
            "access": "",
            "virtual": false,
            "description": "REPLACE\nReplaces a piece of a text string with a different string.",
            "parameters": [
                {
                    "name": "text",
                    "type": "String",
                    "description": "A piece of text to be searched.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "start_position",
                    "type": "Number",
                    "description": "Position within the string to begin the search.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "num_characters",
                    "type": "Number",
                    "description": "Number of characters in original string to be replaced.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "replacement",
                    "type": "String",
                    "description": "String to replace `num_characters` with.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Data collection inspection\"\n// replaces 'survey' with 'inspection'\nREPLACE(\"Data collection survey\", 17, 6, \"inspection\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "RIGHT",
            "access": "",
            "virtual": false,
            "description": "RIGHT\nReturns a substring from the end of a given string.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string value from which the right portion will be returned.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "number_of_characters",
                    "type": "Number",
                    "description": "The number of characters to return from the right side of the string.",
                    "default": 1,
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"DEFG\"\nRIGHT(\"ABCDEFG\", 4)",
                "// returns \"1\"\nRIGHT(\"000001\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "ROLE",
            "access": "",
            "virtual": false,
            "description": "ROLE\nReturns the role name of the current user",
            "parameters": [],
            "examples": [
                "// returns \"Owner\"\nROLE()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "ROUND",
            "access": "",
            "virtual": false,
            "description": "ROUND\nRounds a number to a specified number of decimal places according to standard rounding rules.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to be rounded to `places`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "places",
                    "type": "Number",
                    "description": "The number of decimal places to which to round `value`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 179.8\nROUND(179.848, 1)",
                "// returns 900\nROUND(918.268, -2)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ROUNDDOWN",
            "access": "",
            "virtual": false,
            "description": "ROUNDDOWN\nRounds a number down to a desired number of decimal places.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to round down.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "places",
                    "type": "Number",
                    "description": "The number of places to which to round down.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 156.82\nROUNDDOWN(156.826, 2)",
                "// returns 156\nROUNDDOWN(156.826, 0)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ROUNDUP",
            "access": "",
            "virtual": false,
            "description": "ROUNDUP\nRounds a number up to a desired number of decimal places.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to round up.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "places",
                    "type": "Number",
                    "description": "The number of places to which to round up.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 156.83\nROUNDUP(156.826, 2)",
                "// returns 157\nROUNDUP(156.826, 0)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "RPAD",
            "access": "",
            "virtual": false,
            "description": "RPAD\nPads a string on the right side",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string to pad",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "count",
                    "type": "Number",
                    "description": "The number of characters to pad",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "character",
                    "type": "String",
                    "description": "The character to use for padding",
                    "default": "' '",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"2000\"\nRPAD('2', 4, '0')",
                "// returns \"200000\"\nRPAD('2', 6, '0')"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "SEARCH",
            "access": "",
            "virtual": false,
            "description": "SEARCH\nReturns the position at which a specified string is first found within a block of text. Ignores case.",
            "parameters": [
                {
                    "name": "search_for",
                    "type": "String",
                    "description": "String to search for within `text_to_search`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "text_to_search",
                    "type": "String",
                    "description": "Text to search for the first instance of `search_for`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "starting_at",
                    "type": "Number",
                    "description": "argument Position index to begin the search.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 37\nSEARCH(\"collect\", \"Data analysts love Fulcrum for data collection needs\", 12)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SETRESULT",
            "access": "",
            "virtual": false,
            "description": "SETRESULT\nSets the current result value for the current expression. This is useful in multiline expressions to set the result value.",
            "parameters": [
                {
                    "name": "value",
                    "type": "*",
                    "description": "the value to set as the result of the expression",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nSETRESULT(1)"
            ],
            "returns": {
                "type": "*",
                "description": "the current result value after the value has been set"
            }
        },
        {
            "name": "SHOWERRORS",
            "access": "",
            "virtual": false,
            "description": "SHOWERRORS\nEnable verbose errors to displays in the app. This is useful for troubleshooting complex expressions.",
            "parameters": [
                {
                    "name": "show",
                    "type": "Boolean",
                    "description": "Show full error messages. This can help diagnose problems in expressions on the mobile device.",
                    "default": true,
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nSHOWERRORS()"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "SHUFFLE",
            "access": "",
            "virtual": false,
            "description": "SHUFFLE\nRandomizes an array of items",
            "parameters": [
                {
                    "name": "value",
                    "type": "Array",
                    "description": "an array of items to randomize",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nvar items = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nINSPECT(SHUFFLE(items)) != INSPECT(items[0])"
            ],
            "returns": {
                "type": "Array",
                "description": ""
            }
        },
        {
            "name": "SIGN",
            "access": "",
            "virtual": false,
            "description": "SIGN\nReturns the sign of a given input number. `-1` if negative, `1` if positive, `0` if zero.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to return the sign of.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nSIGN(43)",
                "// returns -1\nSIGN(-3)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SIN",
            "access": "",
            "virtual": false,
            "description": "SIN\nReturns the sine of a value, in radians.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the sine.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns -0.9880316240928618\nSIN(30)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SINH",
            "access": "",
            "virtual": false,
            "description": "SINH\nReturns the hyperbolic sine of a number",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the hyperbolic sine.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1.1752011936438014\nSINH(1)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SORT",
            "access": "",
            "virtual": false,
            "description": "SORT\nReturns the sorted values within an array",
            "parameters": [
                {
                    "name": "values",
                    "type": "Array",
                    "description": "The values to sort",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "callback",
                    "type": "function",
                    "description": "A transform function to use when sorting objects",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns [1,1,2,3,3]\nSORT([1, 2, 3, 3, 1])",
                "// returns [\"a\",\"a\",\"b\",\"b\",\"c\"]\nSORT(['a', 'c', 'b', 'a', 'b'])"
            ],
            "returns": {
                "type": "Array",
                "description": ""
            }
        },
        {
            "name": "SQRT",
            "access": "",
            "virtual": false,
            "description": "SQRT\nCalculates the square root of a given number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The number for which to calculate the square root.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2.23606797749979\nSQRT(5)",
                "// returns NaN\nSQRT(-9)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SQRTPI",
            "access": "",
            "virtual": false,
            "description": "SQRTPI\nCalculates the square root of the product of Pi and a given number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to multiply with Pi and return the square root.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 4.3416075273496055\nSQRTPI(6)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "STATUS",
            "access": "",
            "virtual": false,
            "description": "STATUS\nReturns the current record status value.",
            "parameters": [],
            "examples": [
                "// returns \"approved\"\nSTATUS()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "STATUSLABEL",
            "access": "",
            "virtual": false,
            "description": "STATUSLABEL\nReturns the current record status label.",
            "parameters": [],
            "examples": [
                "// returns \"Approved\"\nSTATUSLABEL()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "SUBSTITUTE",
            "access": "",
            "virtual": false,
            "description": "SUBSTITUTE\nReplaces existing text with new text in a string.",
            "parameters": [
                {
                    "name": "text",
                    "type": "String",
                    "description": "A text value to look in",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "search_for",
                    "type": "String",
                    "description": "A text value to replace",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "replace_with",
                    "type": "String",
                    "description": "A text value to replace it with",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "occurrence",
                    "type": "String",
                    "description": "The instance of the search text to replace (e.g. 4 will only replace the 4th instance)",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"The record data is stored in a record database\"\n// replaces all occurrences\nSUBSTITUTE('The data is stored in a database', 'data', 'record data')",
                "// returns \"The record data is stored in a database\"\n// replaces the first occurrence\nSUBSTITUTE('The data is stored in a database', 'data', 'record data', 1)",
                "// returns \"The data is stored in a record database\"\n// replaces the 2nd occurrence\nSUBSTITUTE('The data is stored in a database', 'data', 'record data', 2)",
                "// returns \"The dAtA is stored in A dAtAbAse\"\nSUBSTITUTE('The data is stored in a database', 'a', 'A')"
            ],
            "returns": {
                "type": "String",
                "description": "the new text string"
            }
        },
        {
            "name": "SUM",
            "access": "",
            "virtual": false,
            "description": "SUM\nCalculates the sum of a range of values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values to add together.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 219\nSUM(4, 10, 22, 183)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SUMSQ",
            "access": "",
            "virtual": false,
            "description": "SUMSQ\nCalculates the sum of the squares of a range of values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values to square and sum.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 50\nSUMSQ(3, 4, 5)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "T",
            "access": "",
            "virtual": false,
            "description": "T\nReturns string as text.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string to convert to text.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Fulcrum\"\nT(\"Fulcrum\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "TIMEADD",
            "access": "",
            "virtual": false,
            "description": "TIMEADD\nAdds an amount of time to a given time",
            "parameters": [
                {
                    "name": "startTimeField",
                    "type": "String",
                    "description": "The time field containing the start time",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "amount",
                    "type": "Number",
                    "description": "The amount of time to add to the given time (number of minutes or hours)",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "format",
                    "type": "String",
                    "description": "The format of the amount. Either `hours` (default) or `minutes`.",
                    "default": "'hours'",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"17:00\"\nTIMEADD('09:00', 8)",
                "// returns \"09:00\"\nTIMEADD('17:00', -8)",
                "// returns \"09:00\"\nTIMEADD('09:00', 48)",
                "// returns \"17:30\"\nTIMEADD('16:00', 1.5)",
                "// returns \"17:30\"\nTIMEADD('16:00', 90, 'minutes')",
                "// returns \"14:30\"\nTIMEADD('16:00', -90, 'minutes')"
            ],
            "returns": {
                "type": "String",
                "description": "the new time value"
            }
        },
        {
            "name": "TIMEDIFF",
            "access": "",
            "virtual": false,
            "description": "TIMEDIFF\nReturns the difference between 2 time fields",
            "parameters": [
                {
                    "name": "startTimeField",
                    "type": "String",
                    "description": "The time field containing the start time",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "endTimeField",
                    "type": "String",
                    "description": "The time field containing the end time",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "format",
                    "type": "String",
                    "description": "The format of the output. Either `hours` (default) or `minutes`.",
                    "default": "'hours'",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 8\nTIMEDIFF('09:00', '17:00')",
                "// returns 120\nTIMEDIFF('09:00', '11:00', 'minutes')",
                "// returns 23\nTIMEDIFF('02:00', '01:00')",
                "// returns \"47 minutes\"\n// This returns the time elapsed in the format '__ hours __ minutes'\n// (or '__ hours', '1 hour __ minutes', etc.)\n// Other tests:\n// start_time => '03:30', stop_stop => '04:30', returns '1 hour'\n// start_time => '02:15', stop_stop => '03:16', returns '1 hour 1 minute'\n// start_time => '01:00', stop_stop => '01:00', returns '24 hours'\n\nvar time = TIMEDIFF('09:22', '10:09', 'minutes');\nvar hours = FLOOR((time / 60), 1);\nvar minutes = time % 60;\n\nif ( hours < 1 && minutes < 1 ) {\n    SETRESULT('N/A');\n}\nelse if ( hours == 1 && minutes < 1 ) {\n    SETRESULT('1 hour');\n}\nelse if ( hours > 1 && minutes < 1 ) {\n    SETRESULT(hours + ' hours');\n}\nelse if ( hours < 1 && minutes == 1 ) {\n    SETRESULT('1 minute');\n}\nelse if ( hours == 1 && minutes == 1 ) {\n    SETRESULT('1 hour 1 minute');\n}\nelse if ( hours > 1 && minutes == 1 ) {\n    SETRESULT(hours + ' hours 1 minute');\n}\nelse if ( hours < 1 && minutes > 1 ) {\n    SETRESULT(minutes + ' minutes');\n}\nelse if ( hours == 1 && minutes > 1 ) {\n    SETRESULT('1 hour ' + minutes + ' minutes');\n}\nelse if ( hours > 1 && minutes > 1 ) {\n    SETRESULT(hours + ' hours ' + minutes + ' minutes');\n}\nelse {\n    SETRESULT('');\n}"
            ],
            "returns": {
                "type": "Number",
                "description": "The number of hours (default) or the number of minutes between the 2 specified times"
            }
        },
        {
            "name": "TIMESTAMP",
            "access": "",
            "virtual": false,
            "description": "TIMESTAMP\nReturns a formatted timestamp",
            "parameters": [],
            "examples": [
                "// returns \"1982-12-16 03:24:00\"\nTIMESTAMP(new Date('December 16, 1982 03:24:00'))"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "TIMEZONE",
            "access": "",
            "virtual": false,
            "description": "TIMEZONE\nReturns the timezone according to the current device settings",
            "parameters": [],
            "examples": [
                "// returns \"America/New_York\"\nTIMEZONE()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "TRIM",
            "access": "",
            "virtual": false,
            "description": "TRIM\nStrips the leading and trailing spaces from a string.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Fulcrum is cross-platform\"\nTRIM(\"  Fulcrum is cross-platform \")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "TRUE",
            "access": "",
            "virtual": false,
            "description": "TRUE\nReturns the boolean value `true`.",
            "parameters": [],
            "examples": [
                "// returns true\nTRUE()"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "TYPEOF",
            "access": "",
            "virtual": false,
            "description": "TYPEOF\nReturns the type of a value",
            "parameters": [
                {
                    "name": "value",
                    "type": "*",
                    "description": "A value to get the type of",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"string\"\nTYPEOF('test')",
                "// returns \"number\"\nTYPEOF(1)",
                "// returns \"boolean\"\nTYPEOF(true)",
                "// returns \"null\"\nTYPEOF(null)",
                "// returns \"date\"\nTYPEOF(new Date)",
                "// returns \"object\"\nTYPEOF({ name: 'Test' })",
                "// returns \"array\"\nTYPEOF([1, 2, 3])"
            ],
            "returns": {
                "type": "String",
                "description": "The type of the value"
            }
        },
        {
            "name": "UNIQUE",
            "access": "",
            "virtual": false,
            "description": "UNIQUE\nReturns the unique values within an array",
            "parameters": [
                {
                    "name": "values",
                    "type": "Array",
                    "description": "The values to unique",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "callback",
                    "type": "function",
                    "description": "A transform function to use when passing objects",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns [1,2,3]\nUNIQUE([1, 2, 3, 3, 1])",
                "// returns [\"blue\",\"red\",\"green\"]\nUNIQUE(['blue', 'red', 'red', 'green', 'blue'])"
            ],
            "returns": {
                "type": "Array",
                "description": ""
            }
        },
        {
            "name": "UPPER",
            "access": "",
            "virtual": false,
            "description": "UPPER\nConverts a specified string to uppercase.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string to convert to uppercase.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"EMPIRE STATE BUILDING\"\nUPPER(\"Empire State Building\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "USERFULLNAME",
            "access": "",
            "virtual": false,
            "description": "USERFULLNAME\nReturns the full name of the current user",
            "parameters": [],
            "examples": [
                "// returns \"John Smith\"\nUSERFULLNAME()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "VALUE",
            "access": "",
            "virtual": false,
            "description": "VALUE\nReturns the current value of a field given the field's data name",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "the Data Name of the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns \"Test Record\"\nVALUE('name')\n\n// identical to using $name"
            ],
            "returns": {
                "type": "*",
                "description": "the current field value"
            }
        },
        {
            "name": "VERSIONINFO",
            "access": "",
            "virtual": false,
            "description": "VERSIONINFO\nReturns version information about the app.",
            "parameters": [],
            "examples": [
                "// returns \"Apple iPhone6,2, iOS 8.1, Fulcrum 2.7.0 2162\"\nVERSIONINFO()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "YEAR",
            "access": "",
            "virtual": false,
            "description": "YEAR\nReturns the year of a given date.",
            "parameters": [
                {
                    "name": "date",
                    "type": "Date",
                    "description": "a date",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2015\nYEAR(\"2015/1/1\")"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "X_ISNEW",
            "access": "",
            "virtual": false,
            "description": "X_ISNEW\nReturns a boolean indicating whether the current feature (record or repeatable item) is new. It returns false if it's being updated.",
            "parameters": [],
            "examples": [
                "// returns true\nX_ISNEW()"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "X_ISUPDATE",
            "access": "",
            "virtual": false,
            "description": "X_ISUPDATE\nReturns a boolean indicating whether the current feature (record or repeatable item) is being updated. It returns false if it's a new record.",
            "parameters": [],
            "examples": [
                "// returns false\nX_ISUPDATE()"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        }
    ]
}
